//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `cat1`.
    static let cat1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat1")
    /// Image `cat2`.
    static let cat2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat2")
    
    /// `UIImage(named: "cat1", bundle: ..., traitCollection: ...)`
    static func cat1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cat2", bundle: ..., traitCollection: ...)`
    static func cat2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat2, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `Splash`.
    static let splash = _R.nib._Splash()
    
    /// `UINib(name: "Splash", in: bundle)`
    static func splash(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.splash)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `SettingsTTableViewCell`.
    static let settingsTTableViewCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "SettingsTTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `Upload`.
    static let upload = _R.storyboard.upload()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    
    /// `UIStoryboard(name: "Upload", bundle: ...)`
    static func upload(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.upload)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _Splash: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "Splash"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SplashView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SplashView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try settings.validate()
      try upload.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DashboardViewController
      
      let bundle = R.hostingBundle
      let dashboardViewController = StoryboardViewControllerResource<DashboardViewController>(identifier: "DashboardViewController")
      let name = "Main"
      
      func dashboardViewController(_: Void = ()) -> DashboardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dashboardViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.main().dashboardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dashboardViewController' could not be loaded from storyboard 'Main' as 'DashboardViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct settings: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Settings"
      let settingViewController = StoryboardViewControllerResource<SettingViewController>(identifier: "SettingViewController")
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")
      
      func settingViewController(_: Void = ()) -> SettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingViewController)
      }
      
      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.settings().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Settings' as 'SettingsViewController'.") }
        if _R.storyboard.settings().settingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingViewController' could not be loaded from storyboard 'Settings' as 'SettingViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct upload: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Upload"
      let scanDocumentViewController = StoryboardViewControllerResource<ScanDocumentViewController>(identifier: "ScanDocumentViewController")
      let scanQRViewController = StoryboardViewControllerResource<ScanQRViewController>(identifier: "ScanQRViewController")
      let verifyImageViewController = StoryboardViewControllerResource<VerifyImageViewController>(identifier: "VerifyImageViewController")
      
      func scanDocumentViewController(_: Void = ()) -> ScanDocumentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scanDocumentViewController)
      }
      
      func scanQRViewController(_: Void = ()) -> ScanQRViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scanQRViewController)
      }
      
      func verifyImageViewController(_: Void = ()) -> VerifyImageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: verifyImageViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "cat1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cat1' is used in storyboard 'Upload', but couldn't be loaded.") }
        if _R.storyboard.upload().verifyImageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'verifyImageViewController' could not be loaded from storyboard 'Upload' as 'VerifyImageViewController'.") }
        if _R.storyboard.upload().scanDocumentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scanDocumentViewController' could not be loaded from storyboard 'Upload' as 'ScanDocumentViewController'.") }
        if _R.storyboard.upload().scanQRViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scanQRViewController' could not be loaded from storyboard 'Upload' as 'ScanQRViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
